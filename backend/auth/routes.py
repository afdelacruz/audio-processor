"""
Authentication Routes Module

This module contains authentication-related API endpoints.
"""

from flask import Blueprint, request, jsonify, current_app
from werkzeug.security import generate_password_hash, check_password_hash
import jwt
from datetime import datetime, timedelta

# Create a Blueprint for auth API endpoints
auth_bp = Blueprint('auth', __name__)


@auth_bp.route('/register', methods=['POST'])
def register():
    """
    Register a new user.
    
    Request:
        - username: User's username
        - email: User's email
        - password: User's password
    
    Response:
        - message: Success message
        - user_id: ID of the created user
    """
    # This is a placeholder implementation
    # In a real application, you would store user data in a database
    
    data = request.get_json()
    
    # Validate input
    if not data or not data.get('username') or not data.get('email') or not data.get('password'):
        return jsonify({
            'status': 'error',
            'message': 'Missing required fields'
        }), 400
    
    # Check if user already exists
    # In a real application, you would query the database
    
    # Create a new user
    user = {
        'id': 'user_123',  # In a real app, this would be generated by the database
        'username': data['username'],
        'email': data['email'],
        'password_hash': generate_password_hash(data['password'])
    }
    
    # In a real application, you would save the user to the database
    
    return jsonify({
        'status': 'success',
        'message': 'User registered successfully',
        'user_id': user['id']
    }), 201


@auth_bp.route('/login', methods=['POST'])
def login():
    """
    Authenticate a user and issue a JWT token.
    
    Request:
        - username: User's username or email
        - password: User's password
    
    Response:
        - token: JWT token
        - expires_at: Token expiration timestamp
    """
    # This is a placeholder implementation
    # In a real application, you would verify credentials against a database
    
    data = request.get_json()
    
    # Validate input
    if not data or not data.get('username') or not data.get('password'):
        return jsonify({
            'status': 'error',
            'message': 'Missing username or password'
        }), 400
    
    # In a real application, you would query the database for the user
    # For this example, we'll use a hardcoded user
    user = {
        'id': 'user_123',
        'username': 'testuser',
        'email': 'test@example.com',
        'password_hash': generate_password_hash('password123')
    }
    
    # Check if user exists and password is correct
    if data['username'] != user['username'] or not check_password_hash(user['password_hash'], data['password']):
        return jsonify({
            'status': 'error',
            'message': 'Invalid username or password'
        }), 401
    
    # Generate a JWT token
    token_expiration = datetime.utcnow() + timedelta(hours=24)
    token = jwt.encode(
        {
            'user_id': user['id'],
            'username': user['username'],
            'exp': token_expiration
        },
        current_app.config['SECRET_KEY'],
        algorithm='HS256'
    )
    
    return jsonify({
        'status': 'success',
        'token': token,
        'expires_at': token_expiration.isoformat()
    }) 